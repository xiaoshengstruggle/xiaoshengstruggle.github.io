<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiao Sheng Blog</title>
  
  <subtitle>客生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-22T15:22:48.655Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xiao sheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/07/22/spring/"/>
    <id>http://example.com/2021/07/22/spring/</id>
    <published>2021-07-22T15:11:16.479Z</published>
    <updated>2021-07-22T15:22:48.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC的本质"><a href="#IOC的本质" class="headerlink" title="IOC的本质"></a>IOC的本质</h1><p>**控制反转IoC(Inversion of Control)是一种设计思想DI(依赖注入)是实现IoC的一种方法,**也有人认为DI只是IoC的</p><p>另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系 完全硬编码在程序中，</p><p>对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方</p><p><strong>个人认为所谓控制反转就是:获得依赖对象的方式反转了</strong></p><p><img src="https://p.pstatp.com/origin/pgc-image/7dbf79eeb3c94a838f0aad88c405850f" alt="1626945795582"></p><p><strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解， </p><p>新版本的Spring也可以零配置实现IoC。 </p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用 </p><p>时再从Ioc容器中取出需要的对象。</p><p><img src="https://p.pstatp.com/origin/pgc-image/411e576a005a4e0f841766d79edaf7f4" alt="1626945840979"></p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为 </p><p>一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。 </p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现</strong>* </p><p><em><strong>控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）</strong></em></p><h1 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h1><h3 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h3><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt; </span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; </span><br><span class="line">&lt;version&gt;<span class="number">5.1</span><span class="number">.10</span>.RELEASE&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2编写代码"><a href="#2编写代码" class="headerlink" title="2编写代码"></a>2编写代码</h3><p>1.编写一个Hello类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,&quot;</span>+ name ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 编写我们的spring文件 , 这里我们命名为beans.xml </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt; </span><br><span class="line">    &lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>        xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt; </span><br><span class="line">    </span><br><span class="line">    &lt;!--bean就是java对象 , 由Spring创建和管理--&gt; </span><br><span class="line">    &lt;bean id=<span class="string">&quot;hello&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Spring&quot;</span>/&gt;</span><br><span class="line">        &lt;/bean&gt; </span><br><span class="line">        </span><br><span class="line">&lt;/beans&gt; </span><br></pre></td></tr></table></figure><p>3测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//解析beans.xml文件 , 生成管理相应的Bean对象 </span></span><br><span class="line"></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> </span><br><span class="line"></span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//getBean : 参数即为spring配置文件中bean的id . </span></span><br><span class="line"></span><br><span class="line">Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>); </span><br><span class="line"></span><br><span class="line">hello.show(); </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="3-思考"><a href="#3-思考" class="headerlink" title="3.思考"></a>3.思考</h3><ul><li>Hello 对象的属性是怎么设置的 ? 【hello 对象的属性是由Spring容器设置的 】 </li></ul><p>这个过程就叫控制反转 : </p><ul><li><p>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是 </p><p>由Spring来创建的 </p></li><li><p>反转 : 程序本身不创建对象 , 而变成被动的接收对象 . </p></li></ul><p>依赖注入 : 就是利用set方法来进行注入的. </p><p>IOC是一种编程思想，由主动的编程变成被动的接收 </p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码 </p><h3 id="4-修改案例一"><a href="#4-修改案例一" class="headerlink" title="4 修改案例一"></a>4 <strong>修改案例一</strong></h3><p>我们在案例一中， 新增一个Spring配置文件beans.xml </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt; </span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span><br><span class="line"></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="line"></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt; </span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;MysqlImpl&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.kuang.dao.impl.UserDaoMySqlImpl&quot;</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;OracleImpl&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.kuang.dao.impl.UserDaoOracleImpl&quot;</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;ServiceImpl&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.kuang.service.impl.UserServiceImpl&quot;</span>&gt; </span><br><span class="line"></span><br><span class="line">&lt;!--注意: 这里的name并不是属性 , 而是set方法后面的那部分 , 首字母小写--&gt; </span><br><span class="line"></span><br><span class="line">&lt;!--引用另外一个bean , 不是用value 而是用 ref--&gt; </span><br><span class="line"></span><br><span class="line">&lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;OracleImpl&quot;</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;/bean&gt; </span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123; </span><br><span class="line"></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> </span><br><span class="line"></span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>); </span><br><span class="line"></span><br><span class="line">UserServiceImpl serviceImpl = (UserServiceImpl) </span><br><span class="line"></span><br><span class="line">context.getBean(<span class="string">&quot;ServiceImpl&quot;</span>); </span><br><span class="line"></span><br><span class="line">serviceImpl.getUser(); </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 </p><p>, 所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 ! </p><p>注：以上内容来自于狂神笔记，仅用于学习；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IOC的本质&quot;&gt;&lt;a href=&quot;#IOC的本质&quot; class=&quot;headerlink&quot; title=&quot;IOC的本质&quot;&gt;&lt;/a&gt;IOC的本质&lt;/h1&gt;&lt;p&gt;**控制反转IoC(Inversion of Control)是一种设计思想DI(依赖注入)是实现IoC的一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/07/05/hello-world/"/>
    <id>http://example.com/2021/07/05/hello-world/</id>
    <published>2021-07-05T08:16:43.868Z</published>
    <updated>2021-07-08T08:21:14.736Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="测试" scheme="http://example.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="阶段性" scheme="http://example.com/tags/%E9%98%B6%E6%AE%B5%E6%80%A7/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
